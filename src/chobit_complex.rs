// Copyright (C) 2023 Hironori Ishibashi
//
// This work is free. You can redistribute it and/or modify it under the
// terms of the Do What The Fuck You Want To Public License, Version 2,
// as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.

//! Complex number for high-speed rotation.
//!
//! Using [CisTable], a complex number can be rotate without trigonometric function.
//!
//! Angle for [Complex] is not radian. it is usize number `[0, 2^13)`.
//!
//! | Radian (`f32`)                           | Angle (`usize`)                                               |
//! |------------------------------------------|---------------------------------------------------------------|
//! | `rad == CisTable::angle_to_radian(angle)` | `angle == CisTable::radian_to_angle(rad)`                      |
//! | `0.0`                                    | `0`                                                           |
//! | `FRAC_PI_4                          `    | `1024 == (8192 >> 3)`                                         |
//! | `FRAC_PI_2`                              | `2048 == (8192 >> 2)`                                         |
//! | `PI`                                     | `4096 == (8192 >> 1)`                                         |
//! | `TAU`                                    | `8192 == CisTable::full_circle_angle()`                        |
//! | `rad % TAU`                              | `angle & (8192 - 1) == Complex::normalize_angle(angle)` |
//!
//! ### CisTable example
//!
//! ```ignore
//! use chobitlibs::chobit_complex::{Complex, CisTable};
//! use core::f32::consts::FRAC_PI_4;
//!
//! let table = CisTable::new();
//!
//! let z_1 = Complex::new(FRAC_PI_4.cos(), FRAC_PI_4.sin());
//! let z_2 = table[CisTable::full_circle_angle() >> 3];
//!
//! let diff = (z_2 - z_1).abs();
//! assert!(diff < 0.002);
//! ```
//!
//! ### Rotation example
//!
//! ```ignore
//! use chobitlibs::chobit_complex::{Complex, CisTable};
//!
//! let z = Complex::new(10.0, 20.0);
//! let table = CisTable::new();
//!
//! // 2 laps.
//! for angle in 0..(CisTable::full_circle_angle() * 2) {
//!     println!("{}", z * table[angle])
//! }
//!
//! // 2 laps in contra-rotating.
//! for angle in 0..(CisTable::full_circle_angle() * 2) {
//!     let angle = 0usize.wrapping_sub(angle);
//!
//!     println!("{}", z * table[angle])
//! }
//! ```

#![allow(dead_code)]

use core::{
    f32::consts::*,
    default::Default,
    cmp::Ordering,
    ops::{
        Neg,
        Add,
        AddAssign,
        Sub,
        SubAssign,
        Mul,
        MulAssign,
        Div,
        DivAssign,
        Index,
        Range
    },
    fmt
};

#[inline]
fn sqrt(x: f32) -> f32 {
    const MAGIC_1: u32 = 0x5f1ffff9;
    const MAGIC_2: f32 = 0.703952253;
    const MAGIC_3: f32 = 2.38924456;

    let y = f32::from_bits(MAGIC_1 - (x.to_bits() >> 1));

    y * (MAGIC_2 * (MAGIC_3 - (x * y * y))) * x
}

/// Complex number.
///
/// # Four arithmetic operations
///
/// ```ignore
/// use chobitlibs::chobit_complex::Complex;
/// {
///     let mut z_1 = Complex::new(1.0, 2.0);
///     let z_2 = Complex::new(3.0, 4.0);
///
///     let result = z_1 + z_2;
///     assert_eq!(result.re, 1.0 + 3.0);
///     assert_eq!(result.im, 2.0 + 4.0);
///
///     z_1 += z_2;
///     assert_eq!(z_1, result);
/// }
///
/// {
///     let mut z_1 = Complex::new(1.0, 2.0);
///     let z_2 = Complex::new(3.0, 4.0);
///
///     let result = z_1 - z_2;
///     assert_eq!(result.re, 1.0 - 3.0);
///     assert_eq!(result.im, 2.0 - 4.0);
///
///     z_1 -= z_2;
///     assert_eq!(z_1, result);
/// }
///
/// {
///     let mut z_1 = Complex::new(1.0, 2.0);
///     let z_2 = Complex::new(3.0, 4.0);
///
///     let result = z_1 * z_2;
///     assert_eq!(result.re, (1.0 * 3.0) - (2.0 * 4.0));
///     assert_eq!(result.im, (1.0 * 4.0) + (2.0 * 3.0));
///
///     z_1 *= z_2;
///     assert_eq!(z_1, result);
/// }
///
/// {
///     let mut z_1 = Complex::new(1.0, 2.0);
///     let z_2 = Complex::new(3.0, 4.0);
///
///     let result = z_1 / z_2;
///     let z_2_abs_2 = z_2.abs_sq();
///     assert_eq!(result.re, ((1.0 * 3.0) + (2.0 * 4.0)) / z_2_abs_2);
///     assert_eq!(result.im, ((2.0 * 3.0) - (1.0 * 4.0)) / z_2_abs_2);
///
///     z_1 /= z_2;
///     assert_eq!(z_1, result);
/// }
/// ```
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Complex {
    pub re: f32,
    pub im: f32
}

impl Complex {
    /// Creates complex.
    ///
    /// - `re` : Real number.
    /// - `im` : Imaginary number.
    /// - __Return__ : Complex number.
    #[inline]
    pub const fn new(re: f32, im: f32) -> Self {
        Self {
            re: re,
            im: im
        }
    }

    /// Calculates absolute square.
    ///
    /// - __Return__ : Absolute square.
    #[inline]
    pub fn abs_sq(&self) -> f32 {
        (self.re * self.re) + (self.im * self.im)
    }

    /// Calculates absolute value.
    ///
    /// - __Return__ : Absolute value.
    #[inline]
    pub fn abs(&self) -> f32 {
        sqrt(self.abs_sq())
    }

    /// Calculates complex conjugate
    ///
    /// - __Return__ : complex conjugate.
    #[inline]
    pub fn conj(&self) -> Self {
        Self {
            re: self.re,
            im: -self.im,
        }
    }

    /// Calculates reciprocal.
    ///
    /// - __Return__ : Reciprocal.
    #[inline]
    pub fn recip(&self) -> Self {
        let abs_sq = self.abs_sq();

        Self {
            re: self.re / abs_sq,
            im: -(self.im / abs_sq),
        }
    }

    /// Returns normalized value of self.
    ///
    /// - __Return__ : Normalized value.
    #[inline]
    pub fn normalize(&self) -> Self {
        let abs = self.abs();

        Self {
            re: self.re / abs,
            im: self.im / abs
        }
    }

    /// Returns self multiplied by `i`.
    ///
    /// - __Return__ : Self multiplied by `i`.
    #[inline]
    pub fn mul_i(&self) -> Self {
        Self {
            re: -self.im,
            im: self.re
        }
    }

    /// Returns self multiplied by `-i`.
    ///
    /// - __Return__ : Self multiplied by `-i`.
    #[inline]
    pub fn mul_neg_i(&self) -> Self {
        Self {
            re: self.im,
            im: -self.re
        }
    }
}

impl From<f32> for Complex {
    #[inline]
    fn from(value: f32) -> Self {
        Self::new(value, 0.0)
    }
}

impl From<Complex> for f32 {
    #[inline]
    fn from(value: Complex) -> Self {
        value.re
    }
}

impl Default for Complex {
    #[inline]
    fn default() -> Self {
        Self::new(f32::default(), f32::default())
    }
}

impl PartialOrd for Complex {
    #[inline]
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        (self.re + self.im).partial_cmp(&(other.re + other.im))
    }
}

impl Neg for Complex {
    type Output = Self;

    #[inline]
    fn neg(self) -> Self {
        Self {
            re: -self.re,
            im: -self.im
        }
    }
}

impl Add<Complex> for Complex {
    type Output = Complex;

    #[inline]
    fn add(self, other: Complex) -> Complex {
        Complex {
            re: self.re + other.re,
            im: self.im + other.im
        }
    }
}

impl Add<f32> for Complex {
    type Output = Complex;

    #[inline]
    fn add(self, other: f32) -> Complex {
        Complex {
            re: self.re + other,
            im: self.im
        }
    }
}

impl Add<Complex> for f32 {
    type Output = Complex;

    #[inline]
    fn add(self, other: Complex) -> Complex {
        Complex {
            re: self + other.re,
            im: other.im
        }
    }
}

impl AddAssign<Complex> for Complex {
    #[inline]
    fn add_assign(&mut self, other: Complex) {
        self.re += other.re;
        self.im += other.im;
    }
}

impl AddAssign<f32> for Complex {
    #[inline]
    fn add_assign(&mut self, other: f32) {
        self.re += other;
    }
}

impl AddAssign<Complex> for f32 {
    #[inline]
    fn add_assign(&mut self, other: Complex) {
        *self += other.re;
    }
}

impl Sub<Complex> for Complex {
    type Output = Complex;

    #[inline]
    fn sub(self, other: Complex) -> Complex {
        Complex {
            re: self.re - other.re,
            im: self.im - other.im
        }
    }
}

impl Sub<f32> for Complex {
    type Output = Complex;

    #[inline]
    fn sub(self, other: f32) -> Complex {
        Complex {
            re: self.re - other,
            im: self.im
        }
    }
}

impl Sub<Complex> for f32 {
    type Output = Complex;

    #[inline]
    fn sub(self, other: Complex) -> Complex {
        Complex {
            re: self - other.re,
            im: other.im
        }
    }
}

impl SubAssign<Complex> for Complex {
    #[inline]
    fn sub_assign(&mut self, other: Complex) {
        self.re -= other.re;
        self.im -= other.im;
    }
}

impl SubAssign<f32> for Complex {
    #[inline]
    fn sub_assign(&mut self, other: f32) {
        self.re -= other;
    }
}

impl SubAssign<Complex> for f32 {
    #[inline]
    fn sub_assign(&mut self, other: Complex) {
        *self -= other.re;
    }
}

impl Mul<Complex> for Complex {
    type Output = Complex;

    #[inline]
    fn mul(self, other: Complex) -> Complex {
        Complex {
            re: (self.re * other.re) - (other.im * self.im),
            im: (other.re * self.im) + (self.re * other.im)
        }
    }
}

impl Mul<f32> for Complex {
    type Output = Complex;

    #[inline]
    fn mul(self, other: f32) -> Complex {
        Complex {
            re: self.re * other,
            im: self.im * other
        }
    }
}

impl Mul<Complex> for f32 {
    type Output = Complex;

    #[inline]
    fn mul(self, other: Complex) -> Complex {
        Complex {
            re: self * other.re,
            im: self * other.im
        }
    }
}

impl MulAssign<Complex> for Complex {
    #[inline]
    fn mul_assign(&mut self, other: Complex) {
        let re = (self.re * other.re) - (other.im * self.im);
        let im = (other.re * self.im) + (self.re * other.im);

        self.re = re;
        self.im = im;
    }
}

impl MulAssign<f32> for Complex {
    #[inline]
    fn mul_assign(&mut self, other: f32) {
        self.re *= other;
        self.im *= other;
    }
}

impl MulAssign<Complex> for f32 {
    #[inline]
    fn mul_assign(&mut self, other: Complex) {
        *self *= other.re;
    }
}

impl Div<Complex> for Complex {
    type Output = Complex;

    #[inline]
    fn div(self, other: Complex) -> Complex {
        let abs_sq = other.abs_sq();

        Complex {
            re: ((self.re * other.re) + (other.im * self.im)) / abs_sq,
            im: ((other.re * self.im) - (self.re * other.im)) / abs_sq
        }
    }
}

impl Div<f32> for Complex {
    type Output = Complex;

    #[inline]
    fn div(self, other: f32) -> Complex {
        Complex {
            re: self.re / other,
            im: self.im / other
        }
    }
}

impl Div<Complex> for f32 {
    type Output = Complex;

    #[inline]
    fn div(self, other: Complex) -> Complex {
        let abs_sq = other.abs_sq();

        Complex {
            re: (self * other.re) / abs_sq,
            im: -((self * other.im) / abs_sq)
        }
    }
}

impl DivAssign<Complex> for Complex {
    #[inline]
    fn div_assign(&mut self, other: Complex) {
        let abs_sq = other.abs_sq();

        let re = ((self.re * other.re) + (other.im * self.im)) / abs_sq;
        let im = ((other.re * self.im) - (self.re * other.im)) / abs_sq;

        self.re = re;
        self.im = im;
    }
}

impl DivAssign<f32> for Complex {
    #[inline]
    fn div_assign(&mut self, other: f32) {
        self.re /= other;
        self.im /= other;
    }
}

impl DivAssign<Complex> for f32 {
    #[inline]
    fn div_assign(&mut self, other: Complex) {
        let abs_sq = other.abs_sq();

        *self = (*self * other.re) / abs_sq;
    }
}

impl fmt::Display for Complex {
    #[inline]
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        write!(formatter, "{}{:+}i", self.re, self.im)
    }
}
const COS_TABLE_SIZE: usize = 1024 * 2;

static COS_TABLE: [f32; COS_TABLE_SIZE] = [
    1.0, 0.9999997058628822,
    0.9999988234517019, 0.9999973527669782,
    0.9999952938095762, 0.9999926465807072,
    0.9999894110819284, 0.9999855873151432,
    0.9999811752826011, 0.9999761749868976,
    0.9999705864309741, 0.9999644096181183,
    0.9999576445519639, 0.9999502912364905,
    0.9999423496760239, 0.999933819875236,
    0.9999247018391445, 0.9999149955731135,
    0.9999047010828529, 0.9998938183744185,
    0.9998823474542126, 0.999870288328983,
    0.9998576410058239, 0.9998444054921752,
    0.9998305817958234, 0.9998161699249004,
    0.9998011698878843, 0.9997855816935992,
    0.9997694053512153, 0.9997526408702488,
    0.9997352882605617, 0.9997173475323622,
    0.9996988186962042, 0.9996797017629879,
    0.9996599967439592, 0.9996397036507102,
    0.9996188224951786, 0.9995973532896484,
    0.9995752960467492, 0.999552650779457,
    0.9995294175010931, 0.9995055962253253,
    0.999481186966167, 0.9994561897379773,
    0.9994306045554617, 0.9994044314336713,
    0.9993776703880028, 0.9993503214341994,
    0.9993223845883495, 0.9992938598668878,
    0.9992647472865944, 0.9992350468645959,
    0.9992047586183639, 0.9991738825657164,
    0.9991424187248169, 0.9991103671141749,
    0.9990777277526454, 0.9990445006594293,
    0.9990106858540734, 0.9989762833564698,
    0.9989412931868569, 0.9989057153658183,
    0.9988695499142836, 0.998832796853528,
    0.9987954562051724, 0.9987575279911833,
    0.9987190122338729, 0.9986799089558991,
    0.9986402181802653, 0.9985999399303204,
    0.9985590742297593, 0.9985176211026222,
    0.9984755805732948, 0.9984329526665084,
    0.9983897374073402, 0.9983459348212124,
    0.9983015449338929, 0.9982565677714952,
    0.9982110033604782, 0.9981648517276462,
    0.9981181129001492, 0.9980707869054823,
    0.9980228737714862, 0.997974373526347,
    0.997925286198596, 0.9978756118171102,
    0.9978253504111116, 0.9977745020101678,
    0.9977230666441916, 0.997671044343441,
    0.9976184351385196, 0.9975652390603758,
    0.9975114561403035, 0.9974570864099419,
    0.9974021299012753, 0.9973465866466332,
    0.9972904566786902, 0.9972337400304663,
    0.9971764367353262, 0.99711854682698,
    0.997060070339483, 0.9970010073072353,
    0.9969413577649822, 0.9968811217478138,
    0.9968202992911657, 0.996758890430818,
    0.9966968952028961, 0.9966343136438699,
    0.9965711457905548, 0.9965073916801108,
    0.9964430513500426, 0.9963781248382002,
    0.996312612182778, 0.9962465134223155,
    0.996179828595697, 0.9961125577421511,
    0.996044700901252, 0.9959762581129178,
    0.9959072294174117, 0.9958376148553416,
    0.9957674144676598, 0.9956966282956635,
    0.9956252563809943, 0.9955532987656385,
    0.9954807554919269, 0.9954076266025349,
    0.9953339121404823, 0.9952596121491334,
    0.9951847266721969, 0.9951092557537261,
    0.9950331994381186, 0.9949565577701164,
    0.9948793307948056, 0.9948015185576171,
    0.9947231211043257, 0.9946441384810507,
    0.9945645707342554, 0.9944844179107476,
    0.9944036800576791, 0.9943223572225458,
    0.9942404494531879, 0.9941579567977897,
    0.9940748793048794, 0.9939912170233294,
    0.9939069700023561, 0.9938221382915197,
    0.9937367219407246, 0.9936507210002191,
    0.9935641355205953, 0.9934769655527892,
    0.9933892111480807, 0.9933008723580933,
    0.9932119492347945, 0.9931224418304956,
    0.9930323501978514, 0.9929416743898605,
    0.9928504144598651, 0.9927585704615511,
    0.992666142448948, 0.9925731304764288,
    0.99247953459871, 0.9923853548708517,
    0.9922905913482574, 0.9921952440866739,
    0.9920993131421918, 0.9920027985712445,
    0.9919057004306093, 0.9918080187774064,
    0.9917097536690995, 0.9916109051634954,
    0.9915114733187439, 0.9914114581933385,
    0.9913108598461154, 0.9912096783362541,
    0.9911079137232769, 0.9910055660670494,
    0.99090263542778, 0.9907991218660204,
    0.9906950254426646, 0.9905903462189501,
    0.9904850842564571, 0.9903792396171082,
    0.9902728123631691, 0.9901658025572484,
    0.9900582102622971, 0.989950035541609,
    0.9898412784588205, 0.9897319390779106,
    0.9896220174632009, 0.9895115136793552,
    0.9894004277913804, 0.9892887598646252,
    0.989176509964781, 0.9890636781578815,
    0.988950264510303, 0.9888362690887635,
    0.9887216919603238, 0.9886065331923864,
    0.9884907928526966, 0.9883744710093413,
    0.9882575677307495, 0.9881400830856926,
    0.9880220171432835, 0.9879033699729778,
    0.9877841416445722, 0.9876643322282057,
    0.9875439417943592, 0.9874229704138554,
    0.9873014181578584, 0.9871792850978743,
    0.987056571305751, 0.9869332768536777,
    0.9868094018141855, 0.9866849462601467,
    0.9865599102647754, 0.9864342939016272,
    0.9863080972445987, 0.9861813203679283,
    0.9860539633461954, 0.9859260262543211,
    0.9857975091675675, 0.9856684121615376,
    0.9855387353121761, 0.9854084786957684,
    0.9852776423889412, 0.9851462264686622,
    0.9850142310122398, 0.9848816560973237,
    0.9847485018019042, 0.9846147682043126,
    0.9844804553832209, 0.9843455634176419,
    0.984210092386929, 0.9840740423707764,
    0.9839374134492189, 0.9838002057026316,
    0.9836624192117303, 0.9835240540575713,
    0.9833851103215512, 0.9832455880854071,
    0.9831054874312163, 0.9829648084413964,
    0.9828235511987052, 0.9826817157862409,
    0.9825393022874412, 0.9823963107860847,
    0.9822527413662894, 0.9821085941125136,
    0.9819638691095552, 0.9818185664425525,
    0.9816726861969831, 0.9815262284586648,
    0.9813791933137546, 0.9812315808487497,
    0.9810833911504867, 0.9809346243061416,
    0.9807852804032304, 0.9806353595296081,
    0.9804848617734694, 0.980333787223348,
    0.9801821359681174, 0.9800299080969901,
    0.9798771036995176, 0.9797237228655912,
    0.9795697656854405, 0.9794152322496348,
    0.979260122649082, 0.9791044369750292,
    0.9789481753190622, 0.9787913377731057,
    0.9786339244294232, 0.9784759353806168,
    0.9783173707196277, 0.978158230539735,
    0.9779985149345571, 0.9778382239980504,
    0.9776773578245099, 0.9775159165085693,
    0.9773539001452, 0.9771913088297123,
    0.9770281426577544, 0.9768644017253126,
    0.9767000861287118, 0.9765351959646145,
    0.9763697313300211, 0.9762036923222706,
    0.976037079039039, 0.975869891578341,
    0.9757021300385286, 0.9755337945182914,
    0.975364885116657, 0.9751954019329904,
    0.9750253450669941, 0.9748547146187084,
    0.9746835106885107, 0.9745117333771157,
    0.9743393827855759, 0.9741664590152803,
    0.9739929621679558, 0.9738188923456661,
    0.973644249650812, 0.9734690341861311,
    0.9732932460546982, 0.9731168853599251,
    0.9729399522055602, 0.9727624466956886,
    0.9725843689347322, 0.9724057190274498,
    0.9722264970789363, 0.9720467031946235,
    0.9718663374802794, 0.9716854000420085,
    0.9715038909862518, 0.9713218104197862,
    0.9711391584497251, 0.970955935183518,
    0.9707721407289504, 0.9705877751941436,
    0.9704028386875555, 0.9702173313179792,
    0.970031253194544, 0.9698446044267148,
    0.9696573851242924, 0.9694695953974131,
    0.9692812353565485, 0.9690923051125062,
    0.9689028047764289, 0.9687127344597948,
    0.9685220942744174, 0.9683308843324452,
    0.9681391047463624, 0.9679467556289878,
    0.9677538370934755, 0.9675603492533144,
    0.9673662922223285, 0.9671716661146766,
    0.9669764710448521, 0.9667807071276833,
    0.9665843744783331, 0.9663874732122989,
    0.9661900034454125, 0.9659919652938406,
    0.9657933588740837, 0.9655941843029768,
    0.9653944416976894, 0.9651941311757247,
    0.9649932528549203, 0.9647918068534479,
    0.9645897932898128, 0.9643872122828543,
    0.9641840639517458, 0.9639803484159941,
    0.9637760657954398, 0.9635712162102573,
    0.963365799780954, 0.9631598166283714,
    0.9629532668736839, 0.9627461506383994,
    0.9625384680443592, 0.9623302192137374,
    0.9621214042690416, 0.9619120233331122,
    0.9617020765291225, 0.961491563980579,
    0.9612804858113206, 0.9610688421455194,
    0.9608566331076797, 0.9606438588226386,
    0.9604305194155658, 0.9602166150119634,
    0.960002145737666, 0.9597871117188399,
    0.9595715130819845, 0.9593553499539308,
    0.9591386224618419, 0.9589213307332132,
    0.9587034748958716, 0.9584850550779761,
    0.9582660714080177, 0.9580465240148186,
    0.9578264130275329, 0.9576057385756463,
    0.9573845007889759, 0.9571626997976702,
    0.9569403357322088, 0.956717408723403,
    0.9564939189023951, 0.956269866400658,
    0.9560452513499964, 0.9558200738825454,
    0.9555943341307711, 0.9553680322274704,
    0.9551411683057708, 0.9549137424991305,
    0.9546857549413383, 0.9544572057665135,
    0.9542280951091057, 0.9539984231038945,
    0.9537681898859903, 0.9535373955908333,
    0.9533060403541939, 0.9530741243121722,
    0.9528416476011987, 0.9526086103580333,
    0.9523750127197659, 0.9521408548238158,
    0.9519061368079323, 0.9516708588101939,
    0.9514350209690083, 0.9511986234231132,
    0.9509616663115751, 0.9507241497737896,
    0.9504860739494817, 0.9502474389787052,
    0.950008245001843, 0.9497684921596067,
    0.9495281805930367, 0.9492873104435021,
    0.9490458818527006, 0.9488038949626585,
    0.9485613499157303, 0.9483182468545991,
    0.9480745859222762, 0.947830367262101,
    0.9475855910177411, 0.947340257333192,
    0.9470943663527772, 0.946847918221148,
    0.9466009130832835, 0.9463533510844906,
    0.9461052323704034, 0.9458565570869839,
    0.9456073253805213, 0.9453575373976323,
    0.9451071932852606, 0.9448562931906772,
    0.9446048372614803, 0.9443528256455948,
    0.9441002584912727, 0.9438471359470927,
    0.9435934581619604, 0.9433392252851077,
    0.9430844374660935, 0.9428290948548027,
    0.9425731976014469, 0.9423167458565638,
    0.9420597397710173, 0.9418021794959976,
    0.9415440651830208, 0.9412853969839287,
    0.9410261750508893, 0.9407663995363961,
    0.9405060705932683, 0.9402451883746509,
    0.939983753034014, 0.9397217647251533,
    0.9394592236021899, 0.9391961298195699,
    0.9389324835320646, 0.9386682848947702,
    0.9384035340631081, 0.9381382311928244,
    0.9378723764399899, 0.937605969961,
    0.937339011912575, 0.9370715024517592,
    0.9368034417359216, 0.9365348299227555,
    0.9362656671702783, 0.9359959536368314,
    0.9357256894810804, 0.9354548748620146,
    0.9351835099389476, 0.9349115948715161,
    0.9346391298196808, 0.9343661149437258,
    0.934092550404259, 0.933818436362211,
    0.9335437729788362, 0.933268560415712,
    0.932992798834739, 0.9327164883981403,
    0.9324396292684624, 0.9321622216085744,
    0.9318842655816681, 0.9316057613512578,
    0.9313267090811804, 0.9310471089355953,
    0.9307669610789837, 0.9304862656761498,
    0.9302050228922191, 0.9299232328926397,
    0.9296408958431813, 0.9293580119099355,
    0.9290745812593159, 0.928790604058057,
    0.9285060804732156, 0.9282210106721694,
    0.9279353948226179, 0.9276492330925812,
    0.9273625256504011, 0.9270752726647401,
    0.9267874743045817, 0.9264991307392305,
    0.9262102421383114, 0.9259208086717701,
    0.9256308305098727, 0.9253403078232063,
    0.9250492407826776, 0.9247576295595139,
    0.9244654743252626, 0.9241727752517912,
    0.9238795325112867, 0.9235857462762567,
    0.9232914167195276, 0.9229965440142462,
    0.9227011283338786, 0.9224051698522099,
    0.9221086687433452, 0.9218116251817081,
    0.921514039342042, 0.9212159113994087,
    0.9209172415291895, 0.920618029907084,
    0.9203182767091106, 0.9200179821116066,
    0.9197171462912274, 0.9194157694249471,
    0.9191138516900578, 0.91881139326417,
    0.9185083943252123, 0.9182048550514309,
    0.9179007756213905, 0.917596156213973,
    0.9172909970083779, 0.916985298184123,
    0.9166790599210427, 0.9163722823992891,
    0.9160649657993317, 0.9157571103019567,
    0.9154487160882678, 0.9151397833396853,
    0.9148303122379462, 0.9145203029651044,
    0.9142097557035307, 0.9138986706359117,
    0.9135870479452508, 0.9132748878148678,
    0.9129621904283982, 0.9126489559697939,
    0.9123351846233227, 0.9120208765735683,
    0.9117060320054299, 0.9113906511041224,
    0.9110747340551764, 0.9107582810444376,
    0.9104412922580672, 0.9101237678825417,
    0.9098057081046522, 0.9094871131115054,
    0.9091679830905224, 0.9088483182294391,
    0.9085281187163061, 0.9082073847394887,
    0.9078861164876663, 0.9075643141498326,
    0.9072419779152958, 0.9069191079736781,
    0.9065957045149153, 0.9062717677292577,
    0.9059472978072685, 0.9056222949398253,
    0.9052967593181188, 0.9049706911336532,
    0.9046440905782462, 0.9043169578440283,
    0.9039892931234433, 0.903661096609248,
    0.9033323684945118, 0.9030031089726172,
    0.9026733182372588, 0.9023429964824442,
    0.9020121439024932, 0.9016807606920377,
    0.901348847046022, 0.9010164031597023,
    0.900683429228647, 0.9003499254487356,
    0.9000158920161603, 0.8996813291274239,
    0.8993462369793416, 0.8990106157690391,
    0.8986744656939538, 0.8983377869518343,
    0.8980005797407399, 0.8976628442590409,
    0.8973245807054183, 0.896985789278864,
    0.8966464701786802, 0.8963066236044795,
    0.8959662497561852, 0.8956253488340301,
    0.8952839210385576, 0.8949419665706208,
    0.8945994856313827, 0.894256478422316,
    0.8939129451452033, 0.8935688860021359,
    0.8932243011955153, 0.8928791909280517,
    0.8925335554027646, 0.8921873948229825,
    0.8918407093923427, 0.8914934993147914,
    0.8911457647945832, 0.8907975060362815,
    0.8904487232447579, 0.8900994166251923,
    0.8897495863830728, 0.8893992327241955,
    0.8890483558546646, 0.8886969559808916,
    0.8883450333095964, 0.8879925880478056,
    0.8876396204028539, 0.8872861305823831,
    0.8869321187943422, 0.886577585246987,
    0.8862225301488806, 0.8858669537088928,
    0.8855108561362, 0.8851542376402851,
    0.8847970984309378, 0.8844394387182538,
    0.884081258712635, 0.8837225586247897,
    0.8833633386657316, 0.8830035990467808,
    0.8826433399795628, 0.8822825616760087,
    0.881921264348355, 0.8815594482091438,
    0.8811971134712221, 0.880834260347742,
    0.8804708890521608, 0.8801069997982404,
    0.8797425928000474, 0.8793776682719533,
    0.8790122264286335, 0.8786462674850681,
    0.8782797916565416, 0.8779127991586418,
    0.8775452902072614, 0.8771772650185959,
    0.8768087238091457, 0.8764396667957136,
    0.8760700941954066, 0.8757000062256346,
    0.8753294031041109, 0.8749582850488516,
    0.8745866522781761, 0.8742145050107063,
    0.8738418434653669, 0.8734686678613849,
    0.8730949784182901, 0.8727207753559143,
    0.8723460588943915, 0.8719708292541578,
    0.871595086655951, 0.871218831320811,
    0.870842063470079, 0.8704647833253977,
    0.8700869911087115, 0.8697086870422657,
    0.8693298713486068, 0.8689505442505824,
    0.8685707059713409, 0.8681903567343313,
    0.8678094967633033, 0.8674281262823069,
    0.8670462455156926, 0.8666638546881111,
    0.866280954024513, 0.8658975437501488,
    0.8655136240905691, 0.8651291952716238,
    0.8647442575194624, 0.864358811060534,
    0.8639728561215868, 0.8635863929296681,
    0.8631994217121242, 0.8628119426966003,
    0.8624239561110406, 0.8620354621836872,
    0.8616464611430813, 0.8612569532180622,
    0.8608669386377673, 0.8604764176316321,
    0.8600853904293901, 0.8596938572610726,
    0.8593018183570085, 0.8589092739478239,
    0.8585162242644427, 0.8581226695380861,
    0.8577286100002721, 0.8573340458828156,
    0.8569389774178288, 0.85654340483772,
    0.8561473283751945, 0.8557507482632539,
    0.855353664735196, 0.8549560780246149,
    0.8545579883654005, 0.8541593959917388,
    0.8537603011381114, 0.8533607040392954,
    0.8529606049303636, 0.8525600040466841,
    0.8521589016239198, 0.8517572978980291,
    0.8513551931052652, 0.8509525874821757,
    0.8505494812656035, 0.8501458746926852,
    0.8497417680008525, 0.8493371614278308,
    0.8489320552116396, 0.8485264495905926,
    0.8481203448032972, 0.8477137410886544,
    0.8473066386858583, 0.8468990378343972,
    0.8464909387740521, 0.846082341744897,
    0.8456732469872991, 0.8452636547419182,
    0.8448535652497071, 0.8444429787519107,
    0.8440318954900664, 0.8436203157060042,
    0.8432082396418454, 0.8427956675400041,
    0.8423825996431858, 0.8419690361943877,
    0.8415549774368984, 0.8411404236142981,
    0.8407253749704581, 0.8403098317495408,
    0.8398937941959995, 0.8394772625545786,
    0.8390602370703127, 0.8386427179885273,
    0.8382247055548381, 0.8378062000151509,
    0.8373872016156619, 0.836967710602857,
    0.836547727223512, 0.8361272517246923,
    0.8357062843537526, 0.8352848253583374,
    0.83486287498638, 0.8344404334861032,
    0.8340175011060181, 0.8335940780949251,
    0.8331701647019132, 0.8327457611763595,
    0.8323208677679297, 0.8318954847265776,
    0.8314696123025452, 0.8310432507463623,
    0.8306164003088463, 0.8301890612411024,
    0.829761233794523, 0.8293329182207883,
    0.8289041147718649, 0.8284748237000071,
    0.8280450452577558, 0.8276147796979384,
    0.8271840272736691, 0.8267527882383485,
    0.8263210628456635, 0.8258888513495868,
    0.8254561540043776, 0.8250229710645802,
    0.8245893027850253, 0.8241551494208286,
    0.8237205112273914, 0.8232853884604001,
    0.8228497813758264, 0.8224136902299264,
    0.8219771152792416, 0.8215400567805976,
    0.8211025149911046, 0.8206644901681575,
    0.8202259825694347, 0.819786992452899,
    0.8193475200767969, 0.818907565699659,
    0.8184671295802987, 0.8180262119778134,
    0.8175848131515837, 0.817142933361273,
    0.8167005728668278, 0.8162577319284774,
    0.8158144108067338, 0.8153706097623913,
    0.8149263290565266, 0.8144815689504986,
    0.8140363297059484, 0.8135906115847985,
    0.8131444148492536, 0.8126977397617995,
    0.8122505865852039, 0.8118029555825155,
    0.8113548470170637, 0.8109062611524597,
    0.8104571982525948, 0.8100076585816411,
    0.8095576424040513, 0.8091071499845582,
    0.808656181588175, 0.8082047374801947,
    0.8077528179261904, 0.8073004231920144,
    0.8068475535437993, 0.8063942092479562,
    0.8059403905711763, 0.8054860977804292,
    0.8050313311429637, 0.8045760909263071,
    0.8041203773982658, 0.8036641908269241,
    0.8032075314806449, 0.8027503996280692,
    0.8022927955381157, 0.8018347194799813,
    0.8013761717231402, 0.8009171525373443,
    0.8004576621926228, 0.7999977009592819,
    0.799537269107905, 0.7990763669093524,
    0.7986149946347608, 0.7981531525555438,
    0.7976908409433912, 0.7972280600702688,
    0.7967648102084188, 0.7963010916303591,
    0.7958369046088836, 0.7953722494170613,
    0.794907126328237, 0.7944415356160306,
    0.7939754775543372, 0.7935089524173267,
    0.7930419604794436, 0.7925745020154077,
    0.7921065773002124, 0.7916381866091259,
    0.7911693302176902, 0.7907000084017216,
    0.79023022143731, 0.7897599696008191,
    0.7892892531688857, 0.7888180724184203,
    0.7883464276266063, 0.7878743190709002,
    0.7874017470290314, 0.7869287117790018,
    0.7864552135990858, 0.7859812527678302,
    0.7855068295640539, 0.7850319442668481,
    0.7845565971555752, 0.78408078850987,
    0.7836045186096382, 0.7831277877350573,
    0.7826505961665757, 0.782172944184913,
    0.7816948320710594, 0.7812162601062761,
    0.7807372285720945, 0.7802577377503166,
    0.7797777879230146, 0.7792973793725303,
    0.778816512381476, 0.7783351872327332,
    0.7778534042094531, 0.7773711635950563,
    0.7768884656732324, 0.7764053107279404,
    0.7759216990434077, 0.7754376309041305,
    0.7749531065948739, 0.7744681264006709,
    0.7739826906068229, 0.773496799498899,
    0.773010453362737, 0.7725236524844413,
    0.7720363971503845, 0.7715486876472063,
    0.7710605242618138, 0.7705719072813808,
    0.7700828369933479, 0.7695933136854229,
    0.7691033376455797, 0.7686129091620584,
    0.7681220285233654, 0.7676306960182734,
    0.7671389119358204, 0.7666466765653104,
    0.7661539901963129, 0.7656608531186625,
    0.765167265622459, 0.7646732279980671,
    0.7641787405361167, 0.7636838035275019,
    0.7631884172633813, 0.762692582035178,
    0.7621962981345789, 0.7616995658535354,
    0.7612023854842618, 0.7607047573192369,
    0.7602066816512024, 0.7597081587731634,
    0.7592091889783881, 0.7587097725604074,
    0.7582099098130153, 0.7577096010302681,
    0.7572088465064846, 0.7567076465362457,
    0.7562060014143945, 0.7557039114360359,
    0.7552013768965365, 0.7546983980915245,
    0.7541949753168892, 0.7536911088687812,
    0.7531867990436125, 0.7526820461380553,
    0.7521768504490428, 0.7516712122737684,
    0.7511651319096865, 0.7506586096545107,
    0.7501516458062151, 0.7496442406630335,
    0.7491363945234594, 0.7486281076862454,
    0.7481193804504036, 0.7476102131152051,
    0.7471006059801801, 0.7465905593451173,
    0.7460800735100638, 0.7455691487753254,
    0.7450577854414661, 0.7445459838093074,
    0.7440337441799293, 0.7435210668546691,
    0.7430079521351217, 0.7424944003231392,
    0.7419804117208311, 0.7414659866305633,
    0.7409511253549591, 0.740435828196898,
    0.7399200954595162, 0.7394039274462058,
    0.7388873244606151, 0.7383702868066486,
    0.737852814788466, 0.7373349087104829,
    0.7368165688773699, 0.7362977955940532,
    0.7357785891657136, 0.7352589498977868,
    0.7347388780959635, 0.7342183740661883,
    0.7336974381146604, 0.7331760705478327,
    0.7326542716724128, 0.7321320417953613,
    0.7316093812238926, 0.7310862902654743,
    0.7305627692278276, 0.7300388184189263,
    0.729514438146997, 0.7289896287205194,
    0.7284643904482252, 0.7279387236390986,
    0.7274126286023758, 0.726886105647545,
    0.726359155084346, 0.7258317772227704,
    0.7253039723730608, 0.7247757408457113,
    0.724247082951467, 0.7237179990013235,
    0.7231884893065275, 0.7226585541785756,
    0.7221281939292153, 0.7215974088704438,
    0.7210661993145081, 0.7205345655739053,
    0.7200025079613817, 0.719470026789933,
    0.7189371223728045, 0.7184037950234898,
    0.7178700450557317, 0.7173358727835217,
    0.7168012785210995, 0.7162662625829531,
    0.7157308252838186, 0.7151949669386801,
    0.7146586878627691, 0.7141219883715648,
    0.7135848687807936, 0.7130473294064293,
    0.7125093705646923, 0.7119709925720501,
    0.7114321957452164, 0.7108929804011517,
    0.7103533468570624, 0.7098132954304008,
    0.7092728264388657, 0.7087319402004006,
    0.7081906370331954, 0.7076489172556844,
    0.7071067811865476, 0.7065642291447096,
    0.7060212614493397, 0.7054778784198522,
    0.704934080375905, 0.7043898676374004,
    0.7038452405244849, 0.7033001993575487,
    0.7027547444572253, 0.7022088761443919,
    0.7016625947401686, 0.7011159005659187,
    0.7005687939432484, 0.7000212751940064,
    0.6994733446402838, 0.6989250026044141,
    0.6983762494089729, 0.6978270853767773,
    0.6972775108308866, 0.6967275260946012,
    0.696177131491463, 0.6956263273452549,
    0.6950751139800009, 0.6945234917199655,
    0.693971460889654, 0.6934190218138119,
    0.6928661748174247, 0.6923129202257182,
    0.6917592583641577, 0.6912051895584485,
    0.6906507141345347, 0.6900958324186,
    0.6895405447370669, 0.6889848514165972,
    0.6884287527840905, 0.6878722491666855,
    0.6873153408917592, 0.6867580282869259,
    0.6862003116800387, 0.6856421913991875,
    0.6850836677727004, 0.6845247411291423,
    0.6839654117973155, 0.6834056801062588,
    0.6828455463852481, 0.6822850109637956,
    0.6817240741716498, 0.6811627363387954,
    0.6806009977954531, 0.680038858872079,
    0.6794763198993651, 0.6789133812082384,
    0.6783500431298616, 0.6777863059956315,
    0.6772221701371804, 0.676657635886375,
    0.676092703575316, 0.6755273735363386,
    0.674961646102012, 0.674395521605139,
    0.6738290003787561, 0.673262082756133,
    0.672694769070773, 0.6721270596564118,
    0.6715589548470183, 0.6709904549767942,
    0.6704215603801731, 0.6698522713918211,
    0.669282588346636, 0.6687125115797481,
    0.6681420414265186, 0.6675711782225403,
    0.6669999223036375, 0.6664282740058654,
    0.6658562336655097, 0.6652838016190872,
    0.6647109782033449, 0.66413776375526,
    0.6635641586120399, 0.6629901631111215,
    0.6624157775901718, 0.6618410023870869,
    0.6612658378399923, 0.6606902842872423,
    0.6601143420674205, 0.6595380115193388,
    0.6589612929820373, 0.658384186794785,
    0.6578066932970786, 0.6572288128286427,
    0.656650545729429, 0.6560718923396177,
    0.6554928529996155, 0.6549134280500561,
    0.6543336178318006, 0.6537534226859362,
    0.6531728429537768, 0.6525918789768625,
    0.6520105310969595, 0.6514287996560598,
    0.650846684996381, 0.650264187460366,
    0.6496813073906832, 0.6490980451302261,
    0.6485144010221126, 0.6479303754096855,
    0.6473459686365121, 0.6467611810463839,
    0.6461760129833164, 0.6455904647915488,
    0.645004536815544, 0.6444182293999884,
    0.6438315428897915, 0.6432444776300859,
    0.6426570339662269, 0.6420692122437925,
    0.6414810128085832, 0.6408924360066214,
    0.6403034821841517, 0.6397141516876405,
    0.6391244448637757, 0.6385343620594668,
    0.6379439036218442, 0.6373530698982591,
    0.6367618612362842, 0.6361702779837122,
    0.6355783204885562, 0.6349859890990495,
    0.6343932841636455, 0.6338002060310173,
    0.6332067550500572, 0.6326129315698775,
    0.6320187359398091, 0.6314241685094019,
    0.6308292296284245, 0.6302339196468645,
    0.6296382389149271, 0.629042187783036,
    0.6284457666018327, 0.6278489757221766,
    0.6272518154951442, 0.6266542862720295,
    0.6260563884043435, 0.6254581222438144,
    0.6248594881423865, 0.6242604864522207,
    0.6236611175256946, 0.6230613817154014,
    0.6224612793741501, 0.6218608108549654,
    0.6212599765110877, 0.6206587766959721,
    0.6200572117632892, 0.619455282066924,
    0.6188529879609763, 0.6182503297997602,
    0.617647307937804, 0.6170439227298498,
    0.6164401745308536, 0.6158360636959851,
    0.6152315905806268, 0.614626755540375,
    0.6140215589310385, 0.6134160011086386,
    0.6128100824294097, 0.6122038032497981,
    0.611597163926462, 0.6109901648162718,
    0.6103828062763095, 0.6097750886638684,
    0.6091670123364532, 0.6085585776517795,
    0.6079497849677737, 0.6073406346425729,
    0.6067311270345245, 0.6061212625021862,
    0.6055110414043255, 0.6049004640999199,
    0.6042895309481561, 0.6036782423084304,
    0.6030665985403483, 0.6024546000037239,
    0.60184224705858, 0.6012295400651486,
    0.600616479383869, 0.600003065375389,
    0.5993892984005645, 0.5987751788204587,
    0.5981607069963424, 0.5975458832896933,
    0.5969307080621965, 0.5963151816757438,
    0.5956993044924335, 0.59508307687457,
    0.5944664991846645, 0.5938495717854336,
    0.5932322950397998, 0.5926146693108911,
    0.591996694962041, 0.5913783723567876,
    0.5907597018588743, 0.5901406838322489,
    0.5895213186410639, 0.5889016066496758,
    0.5882815482226453, 0.5876611437247368,
    0.5870403935209181, 0.5864192979763605,
    0.5857978574564389, 0.5851760723267304,
    0.5845539429530153, 0.5839314697012763,
    0.5833086529376983, 0.5826854930286685,
    0.5820619903407755, 0.5814381452408103,
    0.5808139580957645, 0.5801894292728317,
    0.5795645591394057, 0.5789393480630819,
    0.5783137964116556, 0.5776879045531228,
    0.5770616728556796, 0.5764351016877218,
    0.5758081914178453, 0.5751809424148452,
    0.5745533550477158, 0.5739254296856507,
    0.5732971666980423, 0.5726685664544812,
    0.572039629324757, 0.5714103556788573,
    0.5707807458869674, 0.5701508003194703,
    0.5695205193469473, 0.568889903340176,
    0.5682589526701315, 0.5676276677079862,
    0.5669960488251087, 0.566364096393064,
    0.5657318107836132, 0.5650991923687141,
    0.5644662415205195, 0.5638329586113782,
    0.5631993440138341, 0.5625653981006266,
    0.5619311212446895, 0.5612965138191515,
    0.560661576197336, 0.5600263087527604,
    0.5593907118591361, 0.5587547858903683,
    0.5581185312205561, 0.5574819482239917,
    0.5568450372751601, 0.5562077987487399,
    0.5555702330196023, 0.5549323404628104,
    0.5542941214536201, 0.5536555763674793,
    0.5530167055800276, 0.5523775094670961,
    0.5517379884047074, 0.5510981427690754,
    0.5504579729366048, 0.549817479283891,
    0.5491766621877198, 0.5485355220250674,
    0.5478940591731002, 0.5472522740091741,
    0.5466101669108349, 0.5459677382558177,
    0.5453249884220465, 0.5446819177876345,
    0.5440385267308839, 0.5433948156302848,
    0.542750784864516, 0.542106434812444,
    0.5414617658531236, 0.5408167783657967,
    0.540171472729893, 0.539525849325029,
    0.5388799085310084, 0.5382336507278217,
    0.5375870762956455, 0.536940185614843,
    0.5362929790659632, 0.5356454570297411,
    0.5349976198870973, 0.5343494680191375,
    0.533701001807153, 0.5330522216326197,
    0.532403127877198, 0.5317537209227333,
    0.531104001151255, 0.5304539689449763,
    0.5298036246862948, 0.5291529687577907,
    0.5285020015422285, 0.5278507234225555,
    0.5271991347819014, 0.5265472360035793,
    0.5258950274710847, 0.5252425095680947,
    0.5245896826784688, 0.5239365471862486,
    0.5232831034756564, 0.5226293519310967,
    0.5219752929371544, 0.5213209268785955,
    0.5206662541403673, 0.520011275107596,
    0.5193559901655895, 0.5187003996998352,
    0.5180445040959993, 0.5173883037399291,
    0.51673179901765, 0.5160749903153666,
    0.5154178780194631, 0.5147604625165012,
    0.5141027441932217, 0.5134447234365436,
    0.5127864006335631, 0.5121277761715547,
    0.5114688504379705, 0.510809623820439,
    0.5101500967067667, 0.5094902694849364,
    0.508830142543107, 0.5081697162696147,
    0.5075089910529709, 0.5068479672818633,
    0.5061866453451555, 0.5055250256318855,
    0.5048631085312675, 0.5042008944326906,
    0.5035383837257176, 0.5028755768000869,
    0.5022124740457109, 0.5015490758526754,
    0.5008853826112409, 0.5002213947118407,
    0.4995571125450819, 0.49889253650174475,
    0.49822766697278187, 0.4975625043493191,
    0.49689704902265464, 0.4962313013842583,
    0.4955652618257725, 0.4948989307390113,
    0.49423230851595973, 0.4935653955487749,
    0.4928981922297841, 0.4922306989514861,
    0.49156291610655006, 0.49089484408781514,
    0.4902264832882911, 0.48955783410115755,
    0.4888888969197632, 0.48821967213762674,
    0.48755016014843605, 0.4868803613460474,
    0.48621027612448653, 0.485539904877947,
    0.4848692480007911, 0.48419830588754914,
    0.48352707893291874, 0.4828555675317657,
    0.48218377207912283, 0.4815116929701899,
    0.4808393306003339, 0.48016668536508844,
    0.479493757660153, 0.47882054788139405,
    0.4781470564248431, 0.47747328368669806,
    0.47679923006332225, 0.47612489595124363,
    0.47545028174715587, 0.47477538784791723,
    0.47410021465055, 0.47342476255224153,
    0.4727490319503429, 0.47207302324236866,
    0.4713967368259978, 0.4707201730990717,
    0.4700433324595956, 0.46936621530573763,
    0.46868882203582796, 0.46801115304835983,
    0.4673332087419885, 0.46665498951553097,
    0.4659764957679661, 0.46529772789843465,
    0.4646186863062378, 0.46393937139083846,
    0.46325978355186026, 0.4625799231890868,
    0.46189979070246284, 0.46121938649209243,
    0.46053871095824, 0.45985776450132965,
    0.45917654752194415, 0.4584950604208262,
    0.4578133035988773, 0.457131277457157,
    0.45644898239688386, 0.45576641881943475,
    0.45508358712634384, 0.45440048771930375,
    0.4537171210001639, 0.4530334873709316,
    0.452349587233771, 0.45166542099100254,
    0.4509809890451038, 0.4502962917987087,
    0.4496113296546066, 0.44892610301574326,
    0.44824061228522, 0.447554857866293,
    0.4468688401623743, 0.4461825595770301,
    0.44549601651398174, 0.444809211377105,
    0.44412214457042926, 0.44343481649813843,
    0.44274722756457013, 0.44205937817421476,
    0.4413712687317166, 0.440682899641873,
    0.43999427130963326, 0.43930538414010006,
    0.4386162385385277, 0.43792683491032286,
    0.4372371736610442, 0.43654725519640125,
    0.4358570799222555, 0.43516664824461937,
    0.4344759605696557, 0.4337850173036785,
    0.433093818853152, 0.43240236562469014,
    0.43171065802505737, 0.4310186964611671,
    0.4303264813400826, 0.4296340130690165,
    0.42894129205532955, 0.4282483187065319,
    0.4275550934302822, 0.4268616166343865,
    0.4261678887267996, 0.4254739101156239,
    0.4247796812091088, 0.4240852024156517,
    0.4233904741437961, 0.42269549680223295,
    0.4220002707997998, 0.4213047965454797,
    0.4206090744484025, 0.4199131049178437,
    0.41921688836322396, 0.4185204251941097,
    0.4178237158202124, 0.4171267606513879,
    0.4164295600976373, 0.4157321145691054,
    0.41503442447608163, 0.4143364902289992,
    0.41363831223843456, 0.412939890915108,
    0.412241226669883, 0.4115423199137653,
    0.4108431710579039, 0.41014378051359035,
    0.4094441486922576, 0.4087442760054815,
    0.40804416286497874, 0.40734380968260797,
    0.40664321687036914, 0.40594238484040257,
    0.40524131400498986, 0.4045400047765531,
    0.40383845756765413, 0.40313667279099524,
    0.40243465085941854, 0.401732392185905,
    0.4010298971835758, 0.40032716626569015,
    0.3996241998456468, 0.398920998336983,
    0.3982175621533736, 0.3975138917086323,
    0.3968099874167104, 0.3961058496916963,
    0.3954014789478163, 0.39469687559943367,
    0.3939920400610481, 0.39328697274729657,
    0.3925816740729515, 0.39187614445292235,
    0.391170384302254, 0.39046439403612665,
    0.3897581740698564, 0.3890517248188945,
    0.3883450466988263, 0.3876381401253727,
    0.3869310055143887, 0.386223643281863,
    0.385516053843919, 0.38480823761681293,
    0.38410019501693504, 0.3833919264608088,
    0.38268343236508984, 0.3819747131465672,
    0.3812657692221625, 0.3805566010089286,
    0.3798472089240511, 0.3791375933848474,
    0.3784277548087656, 0.3777176936133858,
    0.3770074102164183, 0.3762969050357048,
    0.3755861784892173, 0.3748752309950576,
    0.374164062971458, 0.3734526748367804,
    0.3727410670095158, 0.37202923990828496,
    0.3713171939518376, 0.37060492955905167,
    0.36989244714893427, 0.3691797471406201,
    0.3684668299533723, 0.3677536960065821,
    0.36704034571976724, 0.3663267795125736,
    0.36561299780477396, 0.3648990010162674,
    0.36418478956707984, 0.36347036387736387,
    0.3627557243673972, 0.36204087145758435,
    0.36132580556845434, 0.36061052712066227,
    0.3598950365349883, 0.35917933423233656,
    0.35846342063373654, 0.357747296160342,
    0.35703096123343003, 0.35631441627440236,
    0.35559766170478396, 0.3548806979462228,
    0.3541635254204905, 0.35344614454948087,
    0.3527285557552107, 0.35201075945981924,
    0.35129275608556715, 0.35057454605483757,
    0.34985612979013503, 0.349137507714085,
    0.3484186802494345, 0.3476996478190515,
    0.3469804108459237, 0.3462609697531602,
    0.34554132496398915, 0.3448214769017593,
    0.344101425989939, 0.3433811726521151,
    0.3426607173119944, 0.3419400603934023,
    0.3412192023202824, 0.3404981435166971,
    0.33977688440682696, 0.33905542541496964,
    0.3383337669655413, 0.3376119094830747,
    0.33688985339222005, 0.3361675991177447,
    0.33544514708453166, 0.3347224977175812,
    0.3339996514420095, 0.333276608683048,
    0.3325533698660442, 0.3318299354164612,
    0.33110630575987643, 0.33038248132198295,
    0.32965846252858755, 0.3289342498056122,
    0.32820984357909266, 0.32748524427517806,
    0.3267604523201318, 0.32603546814033035,
    0.325310292162263, 0.32458492481253215,
    0.32385936651785296, 0.32313361770505233,
    0.32240767880107, 0.32168155023295664,
    0.3209552324278752, 0.3202287258131,
    0.31950203081601575, 0.3187751478641185,
    0.31804807738501506, 0.3173208198064218,
    0.31659337555616585, 0.31586574506218407,
    0.31513792875252244, 0.3144099270553368,
    0.3136817403988916, 0.3129533692115602,
    0.31222481392182505, 0.31149607495827597,
    0.3107671527496115, 0.310038047724638,
    0.3093087603122688, 0.30857929094152503,
    0.307849640041535, 0.3071198080415331,
    0.3063897953708611, 0.30565960245896623,
    0.30492922973540243, 0.3041986776298293,
    0.30346794657201137, 0.30273703699181914,
    0.3020059493192282, 0.301274683984318,
    0.3005432414172734, 0.29981162204838346,
    0.2990798263080405, 0.29834785462674157,
    0.2976157074350863, 0.29688338516377827,
    0.29615088824362396, 0.29541821710553207,
    0.2946853721805143, 0.29395235389968477,
    0.2932191626942587, 0.2924857989955538,
    0.2917522632349894, 0.2910185558440851,
    0.29028467725446233, 0.28955062789784314,
    0.2888164082060495, 0.2880820186110043,
    0.28734745954472957, 0.2866127314393478,
    0.2858778347270807, 0.2851427698402487,
    0.2844075372112718, 0.28367213727266855,
    0.2829365704570554, 0.2822008371971475,
    0.28146493792575805, 0.2807288730757972,
    0.2799926430802734, 0.27925624837229124,
    0.27851968938505306, 0.2777829665518578,
    0.27704608030609995, 0.27630903108127103,
    0.27557181931095825, 0.27483444542884394,
    0.27409690986870633, 0.2733592130644188,
    0.272621355449949, 0.2718833374593599,
    0.27114515952680807, 0.2704068220865448,
    0.2696683255729152, 0.2689296704203573,
    0.2681908570634032, 0.26745188593667774,
    0.2667127574748984, 0.26597347211287553,
    0.2652340302855119, 0.26449443242780163,
    0.2637546789748315, 0.26301477036177906,
    0.2622747070239136, 0.2615344893965956,
    0.26079411791527557, 0.26005359301549513,
    0.25931291513288635, 0.2585720847031704,
    0.25783110216215893, 0.25708996794575323,
    0.2563486824899429, 0.25560724623080755,
    0.2548656596045146, 0.2541239230473206,
    0.25338203699557027, 0.2526400018856956,
    0.2518978181542169, 0.25115548623774203,
    0.2504130065729653, 0.24967037959666852,
    0.24892760574572026, 0.24818468545707478,
    0.24744161916777344, 0.2466984073149425,
    0.2459550503357946, 0.24521154866762768,
    0.2444679027478242, 0.24372411301385213,
    0.24298017990326398, 0.24223610385369604,
    0.2414918853028693, 0.24074752468858854,
    0.2400030224487415, 0.23925837902130012,
    0.2385135948443185, 0.23776867035593421,
    0.23702360599436734, 0.23627840219791962,
    0.23553305940497546, 0.23478757805400108,
    0.23404195858354346, 0.23329620143223156,
    0.23255030703877533, 0.23180427584196478,
    0.23105810828067128, 0.23031180479384553,
    0.22956536582051887, 0.22881879179980236,
    0.2280720831708858, 0.22732524037303883,
    0.2265782638456101, 0.2258311540280262,
    0.22508391135979278, 0.2243365362804937,
    0.22358902922979002, 0.22284139064742128,
    0.2220936209732036, 0.2213457206470308,
    0.22059769010887365, 0.21984952979877875,
    0.21910124015686977, 0.21835282162334643,
    0.21760427463848367, 0.21685559964263257,
    0.2161067970762196, 0.21535786737974555,
    0.21460881099378692, 0.21385962835899383,
    0.21311031991609136, 0.21236088610587858,
    0.2116113273692276, 0.21086164414708483,
    0.21011183688046972, 0.2093619060104742,
    0.20861185197826346, 0.20786167522507515,
    0.20711137619221856, 0.20636095532107568,
    0.20561041305309932, 0.20485974982981442,
    0.204108966092817, 0.20335806228377337,
    0.2026070388444211, 0.20185589621656816,
    0.20110463484209196, 0.20035325516294042,
    0.19960175762113105, 0.19885014265875012,
    0.19809841071795373, 0.197346562240966,
    0.19659459767008022, 0.195842517447658,
    0.19509032201612833, 0.1943380118179886,
    0.19358558729580375, 0.1928330488922053,
    0.19208039704989238, 0.191327632211631,
    0.1905747548202528, 0.18982176531865658,
    0.18906866414980628, 0.18831545175673212,
    0.18756212858252974, 0.18680869507035933,
    0.18605515166344663, 0.185301498805082,
    0.18454773693861964, 0.1837938665074784,
    0.18303988795514106, 0.18228580172515332,
    0.18153160826112513, 0.18077730800672867,
    0.18002290140569951, 0.17926838890183588,
    0.1785137709389976, 0.17775904796110714,
    0.17700422041214886, 0.17624928873616794,
    0.17549425337727137, 0.1747391147796273,
    0.17398387338746385, 0.1732285296450705,
    0.17247308399679603, 0.17171753688704997,
    0.17096188876030136, 0.17020614006107812,
    0.16945029123396793, 0.16869434272361744,
    0.16793829497473123, 0.16718214843207288,
    0.16642590354046422, 0.16566956074478414,
    0.1649131204899701, 0.1641565832210159,
    0.16339994938297323, 0.16264321942095045,
    0.16188639378011188, 0.16112947290567878,
    0.1603724572429284, 0.1596153472371931,
    0.1588581433338614, 0.1581008459783771,
    0.15734345561623828, 0.1565859726929986,
    0.15582839765426532, 0.1550707309457005,
    0.15431297301302024, 0.1535551243019935,
    0.1527971852584434, 0.15203915632824616,
    0.15128103795733025, 0.15052283059167737,
    0.14976453467732162, 0.14900615066034847,
    0.1482476789868962, 0.14748912010315368,
    0.14673047445536175, 0.14597174248981237,
    0.14521292465284752, 0.14445402139086044,
    0.14369503315029458, 0.1429359603776427,
    0.142176803519448, 0.14141756302230313,
    0.14065823933284924, 0.13989883289777738,
    0.13913934416382628, 0.1383797735777839,
    0.13762012158648618, 0.13686038863681643,
    0.1361005751757062, 0.13534068165013433,
    0.13458070850712622, 0.1338206561937547,
    0.13306052515713918, 0.13230031584444468,
    0.13154002870288328, 0.1307796641797118,
    0.13001922272223335, 0.12925870477779627,
    0.12849811079379322, 0.12773744121766228,
    0.12697669649688598, 0.1262158770789904,
    0.1254549834115462, 0.12469401594216777,
    0.1239329751185122, 0.12317186138828065,
    0.12241067519921628, 0.12164941699910554,
    0.12088808723577722, 0.12012668635710158,
    0.11936521481099135, 0.11860367304540084,
    0.11784206150832502, 0.11708038064780055,
    0.11631863091190488, 0.11555681274875529,
    0.11479492660651025, 0.1140329729333673,
    0.11327095217756436, 0.11250886478737883,
    0.11174671121112666, 0.11098449189716338,
    0.11022220729388318, 0.10945985784971803,
    0.10869744401313867, 0.10793496623265376,
    0.10717242495680887, 0.10640982063418784,
    0.1056471537134107, 0.10488442464313497,
    0.10412163387205473, 0.1033587818488997,
    0.10259586902243628, 0.10183289584146667,
    0.10106986275482788, 0.10030677021139282,
    0.09954361866006944, 0.09878040854979966,
    0.09801714032956077, 0.09725381444836335,
    0.0964904313552526, 0.09572699149930732,
    0.09496349532963906, 0.09419994329539319,
    0.09343633584574791, 0.09267267342991337,
    0.0919089564971327, 0.09114518549668113,
    0.09038136087786501, 0.08961748309002292,
    0.08885355258252468, 0.0880895698047705,
    0.08732553520619223, 0.08656144923625124,
    0.08579731234443988, 0.08503312498028041,
    0.08426888759332413, 0.0835046006331524,
    0.0827402645493758, 0.08197587979163311,
    0.08121144680959239, 0.0804469660529501,
    0.07968243797143013, 0.0789178630147851,
    0.07815324163279432, 0.07738857427526505,
    0.07662386139203162, 0.0758591034329545,
    0.07509430084792129, 0.07432945408684587,
    0.07356456359966745, 0.07279962983635162,
    0.07203465324688942, 0.07126963428129642,
    0.07050457338961401, 0.06973947102190738,
    0.06897432762826673, 0.06820914365880645,
    0.0674439195636641, 0.06667865579300154,
    0.06591335279700393, 0.06514801102587886,
    0.06438263092985741, 0.06361721295919319,
    0.06285175756416142, 0.06208626519506025,
    0.06132073630220865, 0.06055517133594778,
    0.05978957074664001, 0.059023934984667986,
    0.05825826450043573, 0.057492559744367684,
    0.05672682116690778, 0.05596104921852052,
    0.05519524434969003, 0.05442940701091915,
    0.05366353765273068, 0.0528976367256654,
    0.05213170468028332, 0.05136574196716273,
    0.05059974903689934, 0.04983372634010726,
    0.049067674327418126, 0.04830159344948017,
    0.04753548415695926, 0.04676934690053796,
    0.046003182130914644, 0.04523699029880475,
    0.044470771854938744, 0.04370452725006342,
    0.04293825693494096, 0.042171961360348,
    0.04140564097707671, 0.040639296235933854,
    0.039872927587739845, 0.03910653548332984,
    0.03834012037355279, 0.037573682709270514,
    0.03680722294135899, 0.0360407415207063,
    0.03527423889821395, 0.03450771552479589,
    0.03374117185137764, 0.032974608328897315,
    0.032208025408304704, 0.03144142354056034,
    0.03067480317663658, 0.029908164767516655,
    0.02914150876419374, 0.028374835617672258,
    0.02760814577896582, 0.026841439699098527,
    0.02607471782910404, 0.02530798062002463,
    0.024541228522912264, 0.023774461988827676,
    0.02300768146883941, 0.02224088741402492,
    0.021474080275469605, 0.020707260504265912,
    0.019940428551514598, 0.0191735848683227,
    0.01840672990580482, 0.017639864115082195,
    0.016872987947281773, 0.016106101853537263,
    0.01533920628498822, 0.014572301692779104,
    0.013805388528060349, 0.013038467241987433,
    0.012271538285719944, 0.011504602110422875,
    0.010737659167264572, 0.009970709907418029,
    0.00920375478205996, 0.00843679424236986,
    0.007669828739531077, 0.006902858724729877,
    0.006135884649154515, 0.005368906963996303,
    0.004601926120448672, 0.003834942569706248,
    0.003067956762966138, 0.0023009691514258865,
    0.0015339801862847662, 0.0007669903187428464,
];

/// Lookup table of imaginary exponential function. (`cis(x) = exp(ix)`)
///
/// It contains 8192 complex numbers.
///
/// In chobit_complex, Angle is not radian. That is unsigned integral number.  
/// Full circle angle is `8192` that is 2 to the 13th power, because it can calculate angle faster than radian. For example...
///
/// ``` ignore
/// // Divides angle by 2.
/// let angle: usize = 1234;
/// let half_angle = angle >> 1;
/// assert_eq!(half_angle, angle / 2);
///
/// // Normalizes big angle.
/// let angle: usize = 1234 + 8192;
/// let normalized_angle = angle & (8192 - 1);  // == CisTable::normalized_angle(angle)
/// assert_eq!(normalized_angle, 1234);
///
/// // Normalizes negative angle.
/// let angle: usize = 0usize.wrapping_sub(1234);
/// let normalized_angle = angle & (8192 - 1);  // == CisTable::normalized_angle(angle)
/// assert_eq!(normalized_angle, 8192 - 1234);
/// ```
#[derive(Debug, Clone, PartialEq)]
pub struct CisTable {
    body: [Complex; CisTable::full_circle_angle()]
}

impl CisTable {
    /// Returns `8192`.
    ///
    /// - __Return__ : `8192`.
    #[inline]
    pub const fn full_circle_angle() -> usize {
        const ANGLE: usize = COS_TABLE_SIZE << 2;

        ANGLE
    }

    /// Normalizes any angle into [0, 8192).
    ///
    /// - `angle` : Angle.
    /// - __Return__ : Normalized angle.
    #[inline]
    pub const fn normalize_angle(angle: usize) -> usize {
        const MASK: usize = CisTable::full_circle_angle() - 1;
        angle & MASK
    }

    /// Converts from radian to angle.
    ///
    /// - `rad` : Radian.
    /// - __Return__ : Angle.
    #[inline]
    pub fn radian_to_angle(rad: f32) -> usize {
        const MAX_ANGLE: f32 = CisTable::full_circle_angle() as f32;

        let angle = (((rad % TAU) * MAX_ANGLE) / TAU) + MAX_ANGLE;

        Self::normalize_angle(angle as usize)
    }

    /// Converts from angle to radian.
    ///
    /// - `rad` : Angle.
    /// - __Return__ : Radian.
    #[inline]
    pub fn angle_to_radian(angle: usize) -> f32 {
        const MAX_ANGLE: f32 = CisTable::full_circle_angle() as f32;

        ((Self::normalize_angle(angle) as f32) * TAU) / MAX_ANGLE 
    }

    /// Creates CisTable.
    ///
    /// - __Return__ : Instance.
    pub fn new() -> Self {
        const QUADRANT_0_ANGLE: usize = 0;
        const QUADRANT_1_ANGLE: usize = CisTable::full_circle_angle() >> 2;
        const QUADRANT_2_ANGLE: usize = CisTable::full_circle_angle() >> 1;
        const QUADRANT_3_ANGLE: usize = QUADRANT_1_ANGLE + QUADRANT_2_ANGLE;
        const QUADRANT_4_ANGLE: usize = CisTable::full_circle_angle();

        let mut body: [Complex; QUADRANT_4_ANGLE] =
            [Complex::default(); QUADRANT_4_ANGLE];

        for i in QUADRANT_0_ANGLE..QUADRANT_1_ANGLE {
            body[i] = Self::cis(i);
            body[i + QUADRANT_1_ANGLE] = body[i].mul_i();
            body[i + QUADRANT_2_ANGLE] = -body[i];
            body[i + QUADRANT_3_ANGLE] = body[i].mul_neg_i();
        }

        Self {body: body}
    }

    fn cis(angle: usize) -> Complex {
        const COS_TABLE_MASK: usize = COS_TABLE_SIZE - 1;

        let base_angle = angle & COS_TABLE_MASK;
        let base_cos = COS_TABLE[base_angle];
        let base_sin = COS_TABLE[COS_TABLE_MASK - base_angle];

        Complex::new(base_cos, base_sin).normalize()
    }

    /// Gets complex number.
    ///
    /// - `angle` : angle.
    /// - __Return__ : Returns complex number but if angle is greater than 8192, returns None.
    #[inline]
    pub fn get(&self, angle: usize) -> Option<&Complex> {
        self.body.get(angle)
    }

    /// Gets complex number.
    ///
    /// - `angle` : angle.
    /// - __Return__ : Returns complex number.
    #[inline]
    pub unsafe fn get_unchecked(&self, angle: usize) -> &Complex {
        self.body.get_unchecked(angle)
    }

    /// Gets self as slice.
    ///
    /// - __Return__ : Self as slice.
    #[inline]
    pub fn as_slice(&self) -> &[Complex] {
        self.body.as_slice()
    }
}

impl Index<usize> for CisTable {
    type Output = Complex;

    #[inline]
    fn index(&self, index: usize) -> &Complex {
        unsafe {self.get_unchecked(CisTable::normalize_angle(index))}
    }
}

impl Index<Range<usize>> for CisTable {
    type Output = [Complex];

    #[inline]
    fn index(&self, index: Range<usize>) -> &[Complex] {
        &self.body[index]
    }
}

impl Complex {
    fn polar_core(
        table: &CisTable,
        cis: &Complex,
        mut min_angle: usize,
        mut max_angle: usize
    ) -> usize {
        const COUNT: u32 =
            (CisTable::full_circle_angle() - 1).count_ones() + 1;

        let mut middle_angle = 0;

        for _ in 0..COUNT {
            middle_angle = (min_angle + max_angle) >> 1;

            let min_d = (*cis - table[min_angle]).abs_sq();
            let max_d = (*cis - table[max_angle]).abs_sq();

            if min_d <= max_d {
                max_angle = middle_angle;
            } else {
                min_angle = middle_angle;
            }
        }

        middle_angle
    }

    /// Gets magnitude and phase.
    ///
    /// - `table` : CisTable to calculate phase.
    /// - __Return__ : (magnitude, phase)
    #[inline]
    pub fn polar(&self, table: &CisTable) -> (f32, usize) {
        const MIN_ANGLE: usize = 0;
        const MAX_ANGLE: usize = CisTable::full_circle_angle() - 1;

        let abs = self.abs();
        let cis = *self / abs;

        (abs, Self::polar_core(table, &cis, MIN_ANGLE, MAX_ANGLE))
    }
}
